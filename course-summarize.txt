########################## start whole project in django
django-admin startproject projectname
django-admin startproject mysite

__init__.py (mysite folder is made of python packages)

manage.py (python script that can be used to performe useful operations)

settings.py (file that has all of the settings for our web application, like time the application should be in, other
applications installed inside, which sort of database we should use )

url.py( acts as the file that takes care of what url (what route) user can go when using the web application

wsgi.py (it's the file for uploading all the locals server to a public server.)

########################## create app
inside of "mysite" folder (it has the manage.py file and another "mysite" folder), type:

python manage.py startapp appname (where appname is our case is hello)
python manage.py startapp hello

inside "hello" folder there are a bunch of files.

views.py is analagous to what app.py does in Flask
it is where we write the code which decides what the user sees when they go to a particular route

in Django all view functions take an argument which is the object call requests
request in this case means the arguments we are passing in the requests, like in Flask
which sort of cookie for example

########################## start server 
on "mysite" folder 
python manage.py runserver


########################## models file
this is the place where we're going to define the classes which defines the
data type for the db. Quite similar what we did with sql alchemy in Flask


########################## ensuring th existence of the models file
go to the settings file for the application, in this case the application is (djangoair-v0),
then go to the INSTALLED APPS section
and type : 'flights.apps.FlightsConfig',
the list should look like this:
# Application definition

INSTALLED_APPS = [
    'flights.apps.FlightsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

########################## migrations
django automatically detects anytime that
as soon as we make a change in our model file, then automatically
generates the sql code necessary to run in our db and allow those changes to happen in our db.

command to create the  flights db table
inside the project folder (djangoair-v0)

python manage.py makemigrations

console shows something like this :

''' Migrations for 'flights':
  flights\migrations\0001_initial.py
    - Create model Flight '''

(out of curiosity)in order to see the sql code from the 0001_initial.py
on project folder (djangoair-v0), issue this command

python manage.py sqlmigrate app migration

python manage.py sqlmigrate flights 0001

apply migration

on project folder (djangoair-v0) issue the next command

python manage.py migrate

########################################### creating a new flight using ipython
install ipython in the virtualenv
pip install ipython
issue the command python manage.py shell -i ipython
once in ipython console:

from flights.models import Flight
f = Flight(origin="New York", destination="London", duration=415) //add a flight
f.save() // this is the equivalent commit operation in Flask ORM
(query for something in the db) Flight.objects.all
it returns: <QuerySet[<Flight: Flight object(1)>]> (QuerySet is a fancy list that has aditional features to it)

Let's make an easier way to see what that QuerySet has inside
go to djangoair-v0/flights/models.py

add this code:

def __str__(self):
    return f"{self.id} - {self.origin} to {self.destination}"

__str__: works for any class NOT only  classes in django
and what it does is define what the object should look like
when it's printed out to a screen. It applies when it's printed
to a terminal or to a HTML.

show first value in db
f = Flight.object.first()

accessing to objects
f.origin
f.id
f.destination

delete the flight
f.delete()

Let's experiment with the Airport and FLights model now

Before experimenting, remember:

on djangoair-v0 issue the command 
python manage.py makemigrations
(this is for adding or updating functions inside of a model, in our case we added Airport on our model.py)

on djangoair-v0 run 
python manage.py migrate (this is to apply the change to your data)

from flights.models import Airport, Flight
jfk = Airport(code = "JFK", city = "New York City")
lhr = Airport(code = "LHR", city = "London")
jfk.save()
lhr.save()
f = Flight(origin = jfk, destination = lhr, duration = 415)
f.save()

f.origin (<Airport: New York City (JFK)>)
f.origin.code ('JFK')
f.origin.city ('New York City')

jfk.departures.all() (<QuerySet [<Flight: 2 - New York City (JFK) to London (LHR)>]>)
this queries for all of the departures that are departing from jfk